name: Lighthouse (post-deploy)
run-name: Lighthouse Â· ${{ github.event.client_payload.commit || github.sha || github.run_id }}
# Audits live site after Render deploy; supports manual runs

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      send_email:
        description: "Send email report"
        type: boolean
        default: true
      to:
        description: "Override recipient email"
        required: false
        type: string
  repository_dispatch:
    types: [render_deploy_succeeded]

concurrency:
  group: lighthouse-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mobile:
    name: Mobile Audit
    # Runs on repository_dispatch or manual
    runs-on: ubuntu-latest
    outputs:
      links: ${{ steps.lhci.outputs.links }}
      scores: ${{ steps.summarize.outputs.scores }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Lighthouse (mobile)
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        continue-on-error: true
        with:
          configPath: ./lighthouserc-mobile.json
          uploadArtifacts: true
          artifactName: lighthouse-mobile
          temporaryPublicStorage: true
      - name: Debug list LHCI outputs (mobile)
        run: |
          echo "Listing .lighthouseci after mobile run" && ls -la .lighthouseci || true
      - name: Publish mobile reports to branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch origin lh-reports || true
          if git ls-remote --exit-code --heads origin lh-reports; then
            git checkout -B lh-reports origin/lh-reports
          else
            git checkout -B lh-reports
            echo "Lighthouse reports branch" > README.md
            git add README.md
            git -c user.name="github-actions[bot]" -c user.email="41898282+github-actions[bot]@users.noreply.github.com" commit -m "chore(reports): init branch" || true
          fi
          mkdir -p reports/${GITHUB_RUN_ID}/mobile
          if [ -d .lighthouseci ] && ls -A .lighthouseci >/dev/null 2>&1; then
            cp -r .lighthouseci/* reports/${GITHUB_RUN_ID}/mobile/ || true
          else
            echo "No lighthouse output for mobile job" > reports/${GITHUB_RUN_ID}/mobile/NO_REPORTS.txt
          fi
          rm -rf reports/latest
          mkdir -p reports
          cp -r reports/${GITHUB_RUN_ID} reports/latest
          git add reports README.md || true
          git -c user.name="github-actions[bot]" -c user.email="41898282+github-actions[bot]@users.noreply.github.com" commit -m "chore(reports): add mobile run ${GITHUB_RUN_ID}" || echo "no changes"
          for i in 1 2 3; do
            git pull --rebase origin lh-reports || true
            git push -u origin lh-reports && break || sleep 2
          done
      - name: Summarize scores (mobile)
        id: summarize
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const dir = '.lighthouseci';
            const files = fs.existsSync(dir) ? fs.readdirSync(dir).filter(f => /\.report\.json$/.test(f)) : [];
            const result = [];
            for (const f of files) {
              let lhr;
              try { lhr = JSON.parse(fs.readFileSync(`${dir}/${f}`, 'utf8')); } catch { continue; }
              const cats = lhr && lhr.categories;
              if (!cats) continue; // skip non-LHR json like assertion-results
              const url = lhr.requestedUrl || lhr.finalUrl || null;
              const score = (k) => (cats[k] && typeof cats[k].score === 'number') ? cats[k].score : null;
              result.push({
                url,
                performance: score('performance'),
                accessibility: score('accessibility'),
                bestPractices: score('best-practices'),
                seo: score('seo'),
              });
            }
            core.setOutput('scores', JSON.stringify(result));

  desktop:
    name: Desktop Audit
    needs: [mobile]
    runs-on: ubuntu-latest
    outputs:
      links: ${{ steps.lhci.outputs.links }}
      scores: ${{ steps.summarize.outputs.scores }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Lighthouse (desktop)
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        continue-on-error: true
        with:
          configPath: ./lighthouserc-desktop.json
          uploadArtifacts: true
          artifactName: lighthouse-desktop
          temporaryPublicStorage: true
      - name: Debug list LHCI outputs (desktop)
        run: |
          echo "Listing .lighthouseci after desktop run" && ls -la .lighthouseci || true
      - name: Publish desktop reports to branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch origin lh-reports || true
          if git ls-remote --exit-code --heads origin lh-reports; then
            git checkout -B lh-reports origin/lh-reports
          else
            git checkout -B lh-reports
            echo "Lighthouse reports branch" > README.md
            git add README.md
            git -c user.name="github-actions[bot]" -c user.email="41898282+github-actions[bot]@users.noreply.github.com" commit -m "chore(reports): init branch" || true
          fi
          mkdir -p reports/${GITHUB_RUN_ID}/desktop
          if [ -d .lighthouseci ] && ls -A .lighthouseci >/dev/null 2>&1; then
            cp -r .lighthouseci/* reports/${GITHUB_RUN_ID}/desktop/ || true
          else
            echo "No lighthouse output for desktop job" > reports/${GITHUB_RUN_ID}/desktop/NO_REPORTS.txt
          fi
          rm -rf reports/latest
          mkdir -p reports
          cp -r reports/${GITHUB_RUN_ID} reports/latest
          git add reports README.md || true
          git -c user.name="github-actions[bot]" -c user.email="41898282+github-actions[bot]@users.noreply.github.com" commit -m "chore(reports): add desktop run ${GITHUB_RUN_ID}" || echo "no changes"
          for i in 1 2 3; do
            git pull --rebase origin lh-reports || true
            git push -u origin lh-reports && break || sleep 2
          done
      - name: Summarize scores (desktop)
        id: summarize
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const dir = '.lighthouseci';
            const files = fs.existsSync(dir) ? fs.readdirSync(dir).filter(f => /\.report\.json$/.test(f)) : [];
            const result = [];
            for (const f of files) {
              let lhr;
              try { lhr = JSON.parse(fs.readFileSync(`${dir}/${f}`, 'utf8')); } catch { continue; }
              const cats = lhr && lhr.categories;
              if (!cats) continue;
              const url = lhr.requestedUrl || lhr.finalUrl || null;
              const score = (k) => (cats[k] && typeof cats[k].score === 'number') ? cats[k].score : null;
              result.push({
                url,
                performance: score('performance'),
                accessibility: score('accessibility'),
                bestPractices: score('best-practices'),
                seo: score('seo'),
              });
            }
            core.setOutput('scores', JSON.stringify(result));

  email_report:
    name: Email Report
    if: github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_dispatch' && inputs.send_email == true)
    needs: [mobile, desktop]
    runs-on: ubuntu-latest
    steps:
      - name: Prepare email body
        id: prep
        uses: actions/github-script@v7
        with:
          script: |
            function format(items) {
              if (!items || !items.length) return '- No data';
              return items.map(x => {
                const p = Math.round((x.performance ?? 0)*100);
                const a = Math.round((x.accessibility ?? 0)*100);
                const b = Math.round((x.bestPractices ?? 0)*100);
                const s = Math.round((x.seo ?? 0)*100);
                return `- ${x.url}\n  - Performance: ${p}\n  - Accessibility: ${a}\n  - Best-Practices: ${b}\n  - SEO: ${s}`;
              }).join('\n');
            }
            const mobileScores = JSON.parse(process.env.MOBILE_SCORES || '[]');
            const desktopScores = JSON.parse(process.env.DESKTOP_SCORES || '[]');
            const thresholds = { mobile: { performance: 70, accessibility: 90, bestPractices: 95, seo: 95 }, desktop: { performance: 85, accessibility: 90, bestPractices: 95, seo: 95 } };
            function below(items, t) {
              return items.some(x => {
                const p = Math.round((x.performance ?? 0)*100);
                const a = Math.round((x.accessibility ?? 0)*100);
                const b = Math.round((x.bestPractices ?? 0)*100);
                const s = Math.round((x.seo ?? 0)*100);
                return p < t.performance || a < t.accessibility || b < t.bestPractices || s < t.seo;
              });
            }
            const mobileFail = below(mobileScores, thresholds.mobile);
            const desktopFail = below(desktopScores, thresholds.desktop);
            const hasIssues = mobileFail || desktopFail;
            core.setOutput('subject', `Lighthouse Report${hasIssues ? ' [ALERT]' : ''}`);
            const mobileLinks = process.env.MOBILE_LINKS || 'see workflow artifacts';
            const desktopLinks = process.env.DESKTOP_LINKS || 'see workflow artifacts';
            const body = `Lighthouse Report${hasIssues ? ' (issues detected)' : ''}\n\nMobile\n\n${format(mobileScores)}\n\nLinks: ${mobileLinks}\n\nDesktop\n\n${format(desktopScores)}\n\nLinks: ${desktopLinks}\n\nRun: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}\nReports branch: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/tree/lh-reports/reports/${process.env.GITHUB_RUN_ID}`;
            require('fs').writeFileSync('email.md', body);
    - name: Send email
        if: ${{ inputs.send_email == true }}
        uses: dawidd6/action-send-mail@v3
        with:
          connection_url: ${{ secrets.MAIL_CONNECTION_URL }}  # smtps://USER:PASS@smtp.gmail.com:465
          subject: ${{ steps.prep.outputs.subject }}
          from: ${{ secrets.MAIL_FROM || 'Lighthouse Bot <bot@klymb.work>' }}
          to: ${{ inputs.to || secrets.MAIL_TO || 'info.julita@gmail.com' }}
          html_body: file://email.md

        env:
          MOBILE_SCORES: ${{ needs.mobile.outputs.scores }}
          DESKTOP_SCORES: ${{ needs.desktop.outputs.scores }}
          MOBILE_LINKS: ${{ needs.mobile.outputs.links }}
          DESKTOP_LINKS: ${{ needs.desktop.outputs.links }}
