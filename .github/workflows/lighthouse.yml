name: Lighthouse CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * *' # run nightly at 03:00 UTC
  workflow_dispatch: {}

jobs:
  mobile:
    name: Mobile Audit
    runs-on: ubuntu-latest
    outputs:
      links: ${{ steps.lhci.outputs.links }}
      scores: ${{ steps.summarize.outputs.scores }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Lighthouse (mobile)
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: ./lighthouserc-mobile.json
          uploadArtifacts: true
          temporaryPublicStorage: true
      - name: Summarize scores (mobile)
        id: summarize
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.lighthouseci';
            const files = fs.existsSync(path) ? fs.readdirSync(path).filter(f => f.endsWith('.json')) : [];
            const result = [];
            for (const f of files) {
              const lhr = JSON.parse(fs.readFileSync(`${path}/${f}`, 'utf8'));
              const url = lhr.requestedUrl || lhr.finalUrl;
              const cats = lhr.categories;
              result.push({
                url,
                performance: cats.performance?.score ?? null,
                accessibility: cats.accessibility?.score ?? null,
                bestPractices: cats['best-practices']?.score ?? null,
                seo: cats.seo?.score ?? null,
              });
            }
            core.setOutput('scores', JSON.stringify(result));

  desktop:
    name: Desktop Audit
    runs-on: ubuntu-latest
    outputs:
      links: ${{ steps.lhci.outputs.links }}
      scores: ${{ steps.summarize.outputs.scores }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Lighthouse (desktop)
        id: lhci
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: ./lighthouserc-desktop.json
          uploadArtifacts: true
          temporaryPublicStorage: true
      - name: Summarize scores (desktop)
        id: summarize
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.lighthouseci';
            const files = fs.existsSync(path) ? fs.readdirSync(path).filter(f => f.endsWith('.json')) : [];
            const result = [];
            for (const f of files) {
              const lhr = JSON.parse(fs.readFileSync(`${path}/${f}`, 'utf8'));
              const url = lhr.requestedUrl || lhr.finalUrl;
              const cats = lhr.categories;
              result.push({
                url,
                performance: cats.performance?.score ?? null,
                accessibility: cats.accessibility?.score ?? null,
                bestPractices: cats['best-practices']?.score ?? null,
                seo: cats.seo?.score ?? null,
              });
            }
            core.setOutput('scores', JSON.stringify(result));

  comment:
    name: PR Comment Summary
    if: github.event_name == 'pull_request'
    needs: [mobile, desktop]
    runs-on: ubuntu-latest
    steps:
      - name: Post Lighthouse summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const mobileScores = JSON.parse(process.env.MOBILE_SCORES || '[]');
            const desktopScores = JSON.parse(process.env.DESKTOP_SCORES || '[]');
            const mobileLinks = process.env.MOBILE_LINKS;
            const desktopLinks = process.env.DESKTOP_LINKS;
            function fmt(items) {
              return items.map(x => `- ${x.url}\n  - Performance: ${Math.round((x.performance ?? 0)*100)}\n  - Accessibility: ${Math.round((x.accessibility ?? 0)*100)}\n  - Best-Practices: ${Math.round((x.bestPractices ?? 0)*100)}\n  - SEO: ${Math.round((x.seo ?? 0)*100)}`).join('\n');
            }
            const body = `### Lighthouse Summary\n\n**Mobile**\n\n${fmt(mobileScores)}\n\nLinks: ${mobileLinks || 'see workflow artifacts'}\n\n**Desktop**\n\n${fmt(desktopScores)}\n\nLinks: ${desktopLinks || 'see workflow artifacts'}`;
            const {owner, repo} = context.repo;
            const issue_number = context.payload.pull_request.number;
            await github.rest.issues.createComment({owner, repo, issue_number, body});
        env:
          MOBILE_SCORES: ${{ needs.mobile.outputs.scores }}
          DESKTOP_SCORES: ${{ needs.desktop.outputs.scores }}
          MOBILE_LINKS: ${{ needs.mobile.outputs.links }}
          DESKTOP_LINKS: ${{ needs.desktop.outputs.links }}
